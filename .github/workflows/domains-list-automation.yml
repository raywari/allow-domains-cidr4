name: Domains Automation and Comparison

on:
  schedule:
    - cron: '0 10 * * *'
  push:
    paths:
      - 'domains.lst'
      - 'sources/sources-domains.txt'
  workflow_dispatch:

jobs:
  process-and-compare-domains:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get install -y wget curl grep moreutils

      - name: Clean domains.lst
        run: |
          sed -i '/^[[:space:]]*#/d; /^;/d; /^\/\//d; /^[[:space:]]*--/d' domains.lst
          sed -i 's/^full://g; s|^https\?://||g; s|^//||g' domains.lst
          sed -i 's|/.*$||g; s|:.*$||g; s|^www[2-9]\?\.||g' domains.lst
          sed -i 's/^[[:space:]]*//; s/[[:space:]]*$//; /^$/d' domains.lst

      - name: Sort domains.lst
        run: LC_COLLATE=C sort -f -u domains.lst -o domains.lst

      - name: Filter subdomains in domains.lst
        run: |
          get_parents() {
            local d=$1
            while [[ $d == *.* ]]; do
              d=${d#*.}
              echo "$d"
            done
          }
          mapfile -t all < domains.lst
          IFS=$'\n' sorted=($(printf '%s\n' "${all[@]}" |
            awk -F. '{print NF-1, $0}' | sort -n | cut -d' ' -f2-))
          declare -A keep; > filtered.txt
          for dom in "${sorted[@]}"; do
            skip=
            for p in $(get_parents "$dom"); do
              [[ ${keep[$p]} ]] && { skip=1; break; }
            done
            [[ $skip ]] || { echo "$dom" >> filtered.txt; keep[$dom]=1; }
          done
          sort -u filtered.txt -o domains.lst
          rm filtered.txt

      - name: Generate NekoBox list
        run: sed 's/^/domain:/' domains.lst | sort -u > domains-nekobox.lst

      - name: Compare with external sources
        run: |
          set -eo pipefail
          TMP_DIR="./tmp"
          DOMAINS_FILE="domains.lst"
          SOURCES_FILE="sources/sources-domains.txt"
          OUTPUT_DIR="categories/Compared-Domains"

          cleanup() {
              [ -d "$TMP_DIR" ] && rm -rf "$TMP_DIR"
          }

          mkdir -p "$TMP_DIR" "$OUTPUT_DIR"
          cp "$DOMAINS_FILE" "$TMP_DIR/domains.lst"

          sed -E \
              -e 's/^[[:space:]]+//; s/[[:space:]]+$//' \
              -e 's|^https?://||' \
              -e 's|^www[0-9]*\.||' \
              -e 's|/.*||' \
              -e 's|:.*||' \
              -e '/^$/d' \
              "$TMP_DIR/domains.lst" | LC_ALL=C sort -u > "$TMP_DIR/domains.tmp"
          mv "$TMP_DIR/domains.tmp" "$TMP_DIR/domains.lst"

          declare -A PRIMARY_DOMAINS
          while IFS= read -r d; do
              PRIMARY_DOMAINS["$d"]=1
          done < "$TMP_DIR/domains.lst"

          declare -A SOURCES
          while IFS= read -r line; do
              line="${line%%#*}"
              [ -z "$line" ] && continue
              url=$(echo "$line" | xargs)
              [[ "$url" =~ ^https?:// ]] || url="https://$url"
              key=$(basename "$url" | cut -d. -f1)
              SOURCES["$key"]="$url"
          done < "$SOURCES_FILE"

          for key in "${!SOURCES[@]}"; do
              url="${SOURCES[$key]}"
              out_file="$TMP_DIR/${key}.lst"
              
              curl -sfL --connect-timeout 30 --retry 3 "$url" > "$out_file" || continue

              sed -E \
                  -e 's/^[[:space:]]+//; s/[[:space:]]+$//' \
                  -e 's|^https?://||' \
                  -e 's|^www[0-9]*\.||' \
                  -e 's|/.*||' \
                  -e 's|:.*||' \
                  -e '/^$/d' \
                  "$out_file" | LC_ALL=C sort -u > "${out_file}.tmp"
              mv "${out_file}.tmp" "$out_file"

              [ -s "$out_file" ] || continue

              filtered=()
              while IFS= read -r domain; do
                  parent="$domain"
                  is_sub=0
                  while [[ "$parent" == *.* ]]; do
                      parent="${parent#*.}"
                      [ -n "${PRIMARY_DOMAINS[$parent]}" ] && { is_sub=1; break; }
                  done
                  [ $is_sub -eq 0 ] && filtered+=("$domain")
              done < "$out_file"
              
              printf "%s\n" "${filtered[@]}" > "${out_file}.filtered"
              mv "${out_file}.filtered" "$out_file"
              [ -s "$out_file" ] || continue

              LC_ALL=C comm -23 \
                  <(LC_ALL=C sort "$out_file") \
                  <(LC_ALL=C sort "$TMP_DIR/domains.lst") > "$TMP_DIR/missing_${key}.txt"

              LC_ALL=C comm -13 \
                  <(LC_ALL=C sort "$out_file") \
                  <(LC_ALL=C sort "$TMP_DIR/domains.lst") > "$TMP_DIR/presence_${key}.txt"
          done

          for type in missing presence; do
              final_file="$OUTPUT_DIR/${type}-domains.txt"
              > "$final_file"
              for key in "${!SOURCES[@]}"; do
                  tmp_file="$TMP_DIR/${type}_${key}.txt"
                  [ -s "$tmp_file" ] && {
                      printf "### %s in %s ###\n" "${type^}" "$key" >> "$final_file"
                      cat "$tmp_file" >> "$final_file"
                      printf "\n" >> "$final_file"
                  }
              done
          done

          cleanup

      - name: Generate domains without YouTube
        run: |
          yt="categories/Services/youtube/youtube-domains.lst"
          [[ -f "$yt" && -f domains.lst ]] && grep -vxFf "$yt" domains.lst > domains-without-yt.lst

      - name: Commit and push .lst changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          for f in domains.lst domains-nekobox.lst domains-without-yt.lst; do
            [[ -f $f ]] && git add "$f"
          done
          git commit -m "Обновление доменных .lst файлов" || echo "Нет изменений для коммита"
          git push origin main

      - name: Commit and push Compared-Domains changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          for f in categories/Compared-Domains/missing-domains.txt categories/Compared-Domains/presence-domains.txt; do
            [[ -f $f ]] && git add "$f"
          done
          git commit -m "Автоматическое сравнение: $(date +'%Y-%m-%d')" || echo "Нет изменений для коммита"
          git push origin main
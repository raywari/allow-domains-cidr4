name: Domains Automation and Comparison

on:
  workflow_dispatch:
  schedule:
    - cron: '0 10 * * *'
  push:
    paths:
      - 'domains.lst'
      - 'sources/sources-domains.txt'

jobs:
  process-and-compare-domains:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get install -y wget grep

      - name: Clean domains.lst
        run: |
          if [[ -f domains.lst ]]; then
            sed -i '/^[[:space:]]*#/d; /^;/d; /^\/\//d; /^[[:space:]]*--/d' domains.lst
            sed -i 's/^full://g; s|^https\?://||g; s|^//||g' domains.lst
            sed -i 's|/.*$||g; s|:.*$||g; s|^www[2-9]?\.||g' domains.lst
            sed -i 's/^[[:space:]]*//; s/[[:space:]]*$//; /^$/d' domains.lst
            echo "domains.lst очищен."
          else
            echo "domains.lst отсутствует." && exit 1
          fi

      - name: Sort domains.lst
        run: |
          if [[ -f domains.lst ]]; then
            LC_COLLATE=C sort -f -u domains.lst -o domains.lst
          fi

      - name: Filter subdomains
        run: |
          if [[ -f domains.lst ]]; then
            get_parents() {
              local domain=$1
              while [[ $domain == *.* ]]; do domain=${domain#*.}; echo "$domain"; done
            }

            mapfile -t domains < domains.lst
            IFS=$'\n' sorted=($(printf '%s\n' "${domains[@]}" | awk -F. '{print NF-1, $0}' | sort -n | cut -d' ' -f2-))

            declare -A kept
            > filtered.txt

            for domain in "${sorted[@]}"; do
              skip=false
              for p in $(get_parents "$domain"); do
                [[ ${kept["$p"]} ]] && { skip=true; break; }
              done
              $skip || { echo "$domain" >> filtered.txt; kept["$domain"]=1; }
            done

            sort -u filtered.txt -o domains.lst
            rm filtered.txt
            echo "Субдомены отфильтрованы."
          fi

      - name: Generate NekoBox list
        run: |
          [[ -f domains.lst ]] && sed 's/^/domain:/' domains.lst | sort -u > domains-nekobox.lst

      - name: Compare with external sources
        run: |
          if [[ ! -f "sources/sources-domains.txt" ]]; then
            echo "Файл источников не найден!" && exit 1
          fi

          mkdir -p categories/Compared-Domains
          rm -f categories/Compared-Domains/*.txt
          cp domains.lst my-domains.lst

          declare -A SOURCES
          while IFS= read -r line; do
            [[ "$line" =~ ^#|^$ ]] && continue
            url=$(echo "$line" | xargs)
            name=$(basename "$url" | sed 's/\.[^.]*$//')
            SOURCES["$name"]="$url"
          done < sources/sources-domains.txt

          has_parent() {
            local d="$1" list="$2"
            while [[ "$d" == *.* ]]; do
              d=${d#*.}
              grep -qxF "$d" "$list" && return 0
            done
            return 1
          }

          for name in "${!SOURCES[@]}"; do
            url="${SOURCES[$name]}"
            echo "Processing $name ($url)"

            wget -qO "${name}.lst" "$url" || { echo "Ошибка загрузки $url"; exit 1; }

            # Generate missing domains
            while read -r domain; do
              [[ -z "$domain" ]] && continue
              if ! grep -qxF "$domain" my-domains.lst && ! has_parent "$domain" my-domains.lst; then
                echo "$domain" >> "missing_${name}.txt"
              fi
            done < "${name}.lst"

            # Generate presence domains
            while read -r domain; do
              [[ -z "$domain" ]] && continue
              if ! grep -qxF "$domain" "${name}.lst" && ! has_parent "$domain" "${name}.lst"; then
                echo "$domain" >> "presence_${name}.txt"
              fi
            done < my-domains.lst

            # Cleanup and sort
            sort -u "missing_${name}.txt" -o "missing_${name}.txt"
            sort -u "presence_${name}.txt" -o "presence_${name}.txt"
            grep -v '\.ua$' "missing_${name}.txt" | sponge "missing_${name}.txt"
          done

          # Generate final reports
          {
            for name in "${!SOURCES[@]}"; do
              echo "### Missing in $name ###"
              cat "missing_${name}.txt"
              echo
            done
          } > categories/Compared-Domains/missing-domains.txt

          {
            for name in "${!SOURCES[@]}"; do
              echo "### Present only in $name ###"
              cat "presence_${name}.txt"
              echo
            done
          } > categories/Compared-Domains/presence-domains.txt

          echo "Сравнение завершено."

      - name: Generate domains without YouTube
        run: |
          yt_file="categories/Services/youtube/youtube-domains.lst"
          [[ -f "$yt_file" && -f domains.lst ]] && \
            grep -vxFf "$yt_file" domains.lst > domains-without-yt.lst || \
            echo "Пропуск генерации domains-without-yt.lst"

      - name: Commit and push .lst changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add main domain files
          for f in domains.lst domains-nekobox.lst domains-without-yt.lst; do
            [[ -f $f ]] && git add "$f"
          done

          git commit -m "Обновление доменных списков: $(date +'%Y-%m-%d %H:%M')" || echo "Нет изменений в основных файлах"
          git push origin main

      - name: Commit and push Compared-Domains changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add comparison results
          for f in categories/Compared-Domains/missing-domains.txt categories/Compared-Domains/presence-domains.txt; do
            [[ -f $f ]] && git add "$f"
          done

          git commit -m "Обновление результатов сравнения: $(date +'%Y-%m-%d %H:%M')" || echo "Нет изменений в отчетах сравнения"
          git push origin main
name: Domains Automation and Comparison

on:
  workflow_dispatch:
  schedule:
    - cron: '0 10 * * *'
  push:
    paths:
      - 'domains.lst'

env:
  LOG_FILE: workflow.log

jobs:
  process-and-compare-domains:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget grep || echo "ОШИБКА: Не удалось установить зависимости" >> $LOG_FILE
        continue-on-error: true

      - name: Очистка файла domains.lst
        run: |
          if [ -f domains.lst ]; then
            sed -i '/^\s*$/d; /^\s*#/d; /^\s*\/\//d; /^\s*;/d; /^\s*--/d' domains.lst
            echo "Пустые строки и комментарии удалены." >> $LOG_FILE
          else
            echo "ОШИБКА: Файл domains.lst отсутствует." >> $LOG_FILE
          fi
        continue-on-error: true

      - name: Сортировка файла domains.lst
        run: |
          if [ -f domains.lst ]; then
            LC_COLLATE=C sort -f -u domains.lst -o domains.lst
            echo "domains.lst отсортирован." >> $LOG_FILE
          else
            echo "ОШИБКА: Файл domains.lst отсутствует для сортировки." >> $LOG_FILE
          fi
        continue-on-error: true

      - name: Удаление 'www.' из доменов
        run: |
          if [ -f domains.lst ]; then
            sed -i 's/^www\.//g' domains.lst
            echo "'www.' удалено из доменов." >> $LOG_FILE
          else
            echo "ОШИБКА: Файл domains.lst отсутствует для удаления www." >> $LOG_FILE
          fi
        continue-on-error: true

      - name: Фильтрация поддоменов
        run: |
          if [ -f domains.lst ]; then
            get_parents() {
              local domain=$1
              local parents=()
              local i=0
              while [[ $domain = *.* ]] && (( i < 99 )); do
                domain=${domain#*.}
                parents+=("$domain")
                ((i++))
              done
              echo "${parents[@]}"
            }

            mapfile -t domains < domains.lst
            IFS=$'\n' sorted=($(printf '%s\n' "${domains[@]}" | awk -F. '{print NF-1, $0}' | sort -n | cut -d' ' -f2-))
            unset IFS

            declare -A kept
            > filtered_domains.txt

            for domain in "${sorted[@]}"; do
              parents=($(get_parents "$domain"))
              skip=false
              for p in "${parents[@]}"; do
                if [[ -n "${kept[$p]}" ]]; then
                  skip=true
                  break
                fi
              done
              if ! $skip; then
                echo "$domain" >> filtered_domains.txt
                kept["$domain"]=1
              fi
            done

            sort -u filtered_domains.txt -o domains.lst
            rm filtered_domains.txt
            echo "Поддомены отфильтрованы." >> $LOG_FILE
          else
            echo "ОШИБКА: Файл domains.lst отсутствует для фильтрации поддоменов." >> $LOG_FILE
          fi
        continue-on-error: true

      - name: Генерация domains-nekobox.lst
        run: |
          if [ -f domains.lst ]; then
            sed 's/^/domain:/' domains.lst | sort -u > domains-nekobox.lst
            echo "domains-nekobox.lst создан." >> $LOG_FILE
          else
            echo "ОШИБКА: Не найден domains.lst для nekobox." >> $LOG_FILE
          fi
        continue-on-error: true

      - name: Сравнение с внешними источниками
        run: |
          declare -A sources
          sources["RussiaInside"]="https://raw.githubusercontent.com/itdoginfo/allow-domains/main/Russia/inside-raw.lst"
          sources["CommunityFilter"]="https://raw.githubusercontent.com/1andrevich/Re-filter-lists/refs/heads/main/community.lst"

          rm -f categories/Compared-Domains/missing-domains.txt categories/Compared-Domains/presence-domains.txt
          touch categories/Compared-Domains/missing-domains.txt categories/Compared-Domains/presence-domains.txt
          cp domains.lst my-domains.lst

          has_parent_in_list() {
            local domain=$1
            local list=$2
            local parents=()
            local i=0
            while [[ $domain = *.* ]] && (( i < 99 )); do
              domain=${domain#*.}
              parents+=("$domain")
              ((i++))
            done
            for p in "${parents[@]}"; do
              if grep -q -x "$p" "$list"; then return 0; fi
            done
            return 1
          }

          for source_name in "${!sources[@]}"; do
            source_url="${sources[$source_name]}"
            source_file="${source_name,,}.lst"
            wget -q -O "$source_file" "$source_url"
            if [ $? -ne 0 ]; then
              echo "ОШИБКА: Не удалось скачать $source_file" >> $LOG_FILE
              continue
            fi

            while IFS= read -r domain; do
              if ! grep -q -x "$domain" my-domains.lst && ! has_parent_in_list "$domain" my-domains.lst; then
                echo "$domain" >> "missing_${source_name,,}.txt"
              fi
            done < "$source_file"

            while IFS= read -r domain; do
              if ! grep -q -x "$domain" "$source_file" && ! has_parent_in_list "$domain" "$source_file"; then
                echo "$domain" >> "presence_${source_name,,}.txt"
              fi
            done < my-domains.lst

            [ -f "missing_${source_name,,}.txt" ] && sort -u "missing_${source_name,,}.txt" -o "missing_${source_name,,}.txt"
            [ -f "presence_${source_name,,}.txt" ] && sort -u "presence_${source_name,,}.txt" -o "presence_${source_name,,}.txt"

            [ -f "missing_${source_name,,}.txt" ] && grep -v '\.ua$' "missing_${source_name,,}.txt" > tmp && mv tmp "missing_${source_name,,}.txt"
            [ -f "presence_${source_name,,}.txt" ] && grep -v '\.ua$' "presence_${source_name,,}.txt" > tmp && mv tmp "presence_${source_name,,}.txt"

            {
              echo "### missing $source_name"
              echo
              cat "missing_${source_name,,}.txt" 2>/dev/null || echo "(нет)"
              echo
            } >> categories/Compared-Domains/missing-domains.txt

            {
              echo "### presence $source_name"
              echo
              cat "presence_${source_name,,}.txt" 2>/dev/null || echo "(нет)"
              echo
            } >> categories/Compared-Domains/presence-domains.txt

            rm -f "$source_file" "missing_${source_name,,}.txt" "presence_${source_name,,}.txt"
          done

          rm -f my-domains.lst tmp
          echo "Сравнение завершено." >> $LOG_FILE
        continue-on-error: true

      - name: Файл без YouTube доменов
        run: |
          exclude_file="categories/Services/youtube/youtube-domains.lst"
          if [ -f "$exclude_file" ] && [ -f domains.lst ]; then
            grep -vxFf "$exclude_file" domains.lst | sort -u > domains-without-yt.lst
            echo "domains-without-yt.lst создан." >> $LOG_FILE
          else
            echo "ОШИБКА: Нет exclude-файла или domains.lst." >> $LOG_FILE
          fi
        continue-on-error: true

      - name: Финальный лог проверки
        run: |
          echo "==== Финальный лог выполнения ===="
          cat $LOG_FILE
          if grep -q "ОШИБКА" $LOG_FILE; then
            echo "Обнаружены ошибки. Пуш не будет выполнен."
            exit 1
          else
            echo "Ошибок не обнаружено."
          fi

      - name: Commit и Push .lst файлов
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add domains.lst domains-nekobox.lst domains-without-yt.lst
          git commit -m "Обновление доменных .lst файлов" || echo "Нет изменений для коммита"
          git push origin main
        continue-on-error: true

      - name: Commit и Push Compared-Domains
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add categories/Compared-Domains/missing-domains.txt categories/Compared-Domains/presence-domains.txt
          git commit -m "Автоматическое сравнение: $(date +'%Y-%m-%d')" || echo "Нет изменений для коммита"
          git push origin main
        continue-on-error: true

name: Update Block Lists

on:
  schedule:
    - cron: '0 21 * * *'
  push:
    paths:
      - 'categories/Block/**.lst'
      - 'sources/sources-block.txt'
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Prepare environment
        run: |
          mkdir -p categories/Block sources
          cd categories/Block
          touch block-ips.lst block-domains.lst
          rm -f ../temp.* *.tmp

      - name: Validate and fix entries
        run: |
          cd categories/Block
          
          # Сохраняем оригинальные записи без комментариев и пустых строк
          grep -v '^[[:space:]]*#' block-ips.lst | grep -v '^[[:space:]]*$' > original-ips.tmp
          grep -v '^[[:space:]]*#' block-domains.lst | grep -v '^[[:space:]]*$' > original-domains.tmp
          
          # Очищаем префиксы 0.0.0.0 или 127.0.0.1
          sed -i -E 's/^(0\.0\.0\.0|127\.0\.0\.1)[[:space:]]*//g' original-ips.tmp original-domains.tmp
          
          # Создаем временные файлы для корректных списков
          > valid-ips.tmp
          > valid-domains.tmp
          
          # Регулярка для IP: только цифры и точки (валидные IPv4)
          ip_regex='^(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])$'
          
          # Обрабатываем записи из block-ips.lst
          while IFS= read -r entry; do
            if [[ -n "$entry" ]]; then
              if echo "$entry" | grep -qE "$ip_regex"; then
                echo "$entry" >> valid-ips.tmp
              else
                echo "$entry" >> valid-domains.tmp
              fi
            fi
          done < original-ips.tmp
          
          # Обрабатываем записи из block-domains.lst
          while IFS= read -r entry; do
            if [[ -n "$entry" ]]; then
              if echo "$entry" | grep -qE "$ip_regex"; then
                echo "$entry" >> valid-ips.tmp
              else
                echo "$entry" >> valid-domains.tmp
              fi
            fi
          done < original-domains.tmp
          
          # Перемещаем временные файлы в основные
          cat valid-ips.tmp > block-ips.lst
          cat valid-domains.tmp > block-domains.lst
          
          # Очищаем временные файлы
          rm -f original-ips.tmp original-domains.tmp valid-ips.tmp valid-domains.tmp

      - name: Fetch external data
        run: |
          temp_file="$GITHUB_WORKSPACE/temp.txt"
          > "$temp_file"

          while IFS= read -r line || [ -n "$line" ]; do
            [[ "$line" =~ ^[[:space:]]*# || -z "$line" ]] && continue
            line=$(echo "$line" | xargs)

            echo "Processing URL: $line"
            curl -sSfL "$line" | \
              grep -v '^#' | \
              sed -E 's/^(0\.0\.0\.0|127\.0\.0\.1)[[:space:]]+//' | \
              grep -v '^[[:space:]]*$' >> "$temp_file" || true
          done < sources/sources-block.txt

      - name: Update lists
        run: |
          cd categories/Block
          
          # Добавляем новые IP
          grep -E '^(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])$' \
            "$GITHUB_WORKSPACE/temp.txt" >> block-ips.lst

          # Добавляем новые домены (исключая IP)
          grep -vFf block-ips.lst "$GITHUB_WORKSPACE/temp.txt" >> block-domains.lst

      - name: Final processing
        run: |
          cd categories/Block
          
          # Функция для фильтрации субдоменов
          filter_subdomains() {
            local input_file=$1
            local output_file=$2
            
            get_parents() {
              local domain=$1
              local parents=()
              while [[ "$domain" == *.* ]]; do
                domain="${domain#*.}"
                parents+=("$domain")
              done
              echo "${parents[@]}"
            }

            # Сортируем домены по уровню вложенности
            mapfile -t domains < "$input_file"
            IFS=$'\n' sorted=($(printf '%s\n' "${domains[@]}" | awk -F. '{print NF-1, $0}' | sort -n | cut -d' ' -f2-))
            unset IFS

            declare -A kept
            > temp_filtered.txt

            for domain in "${sorted[@]}"; do
              skip=false
              for p in $(get_parents "$domain"); do
                if [[ -n "${kept["$p"]}" ]]; then
                  skip=true
                  break
                fi
              done
              if ! $skip; then
                echo "$domain" >> temp_filtered.txt
                kept["$domain"]=1
              fi
            done

            sort -u temp_filtered.txt -o "$output_file"
            rm -f temp_filtered.txt
          }

          # Применяем фильтрацию только для доменов
          if [[ -s block-domains.lst ]]; then
            echo "Фильтрация субдоменов..."
            filter_subdomains block-domains.lst filtered-domains.lst
            mv filtered-domains.lst block-domains.lst
          fi

          # Применяем sort -u к обоим файлам перед генерацией hosts
          sort -u block-ips.lst -o block-ips.lst
          sort -u block-domains.lst -o block-domains.lst

          # Генерация hosts файла
          {
            echo "# Auto-generated hosts"
            echo -e "\n# IP addresses"
            awk '{print "0.0.0.0 "$0}' block-ips.lst
            echo -e "\n# Domains"
            awk '{print "0.0.0.0 "$0}' block-domains.lst
          } > hosts

      - name: Cleanup
        run: |
          rm -f "$GITHUB_WORKSPACE/temp.txt"

      - name: Commit changes
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          git add categories/Block/
          git commit -m "Update block lists" || exit 0
          git push origin main
